<?xml version="1.0" encoding="UTF-8"?>
<proposal href="proposals/ANGLE_multi_draw/">
  <name>ANGLE_multi_draw</name>

  <contact> <a href="https://www.khronos.org/webgl/public-mailing-list/">WebGL
  working group</a> (public_webgl 'at' khronos.org) </contact>

  <contributors>
    <contributor>Contributors to the ANGLE_multi_draw specification</contributor>
    <contributor>Members of the WebGL working group</contributor>
  </contributors>

  <number>NN</number>

  <depends>
    <api version="1.0"/>
  </depends>

  <overview>
    <mirrors href="http://www.khronos.org/registry/gles/extensions/ANGLE/ANGLE_multi_draw.txt" name="ANGLE_multi_draw">
      <addendum>
        The implementation must validate the arrays and indices referenced by <code>multiDrawArraysANGLE</code>, <code>multiDrawElementsANGLE</code>, <code>multiDrawArraysInstancedANGLE</code>, and <code>multiDrawElementsInstancedANGLE</code> similarly to how indices referenced by <code>drawArrays</code> and <code>drawElements</code> are validated according to section
        <a href="http://www.khronos.org/registry/webgl/specs/1.0/#ATTRIBS_AND_RANGE_CHECKING">Enabled Vertex Attributes and Range Checking</a> of the
        WebGL specification.
      </addendum>
    </mirrors>
    <p>Although the extension contains ANGLE in the name it may be exposed by any implementation, whether or not the implementation uses the ANGLE library.</p>
    <div class="nonnormative">
      <p>This extension provides Multi* draw call variants. On WebGL 2.0 contexts or WebGL 1.0 contexts that support ANGLE_instanced_arrays, it also provides Multi* instanced draw call variants.</p>

      <p>This extension additionally adds the <code>gl_DrawID</code> builtin for the new Multi* draw commands</p>

      <p>CAD vendors rendering large models comprised of many individual parts face scalability issues issuing large numbers of draw calls from WebGL. This extension reduces draw call overhead by allowing better batching.</p>
    </div>

    <features>
      <feature>The <code>*Offset</code> arguments to the new entry points choose the starting offset into their respective typed arrays or sequences. This primarily avoids allocation of temporary typed array views.</feature>

      <feature>The <code>multiDrawArraysANGLE</code> and <code>multiDrawElementsANGLE</code> entry points are added. These provide a counterpoint to instanced rendering and are more flexible for certain scenarios. They behave as to multiple calls to <code>drawArrays</code> and <code>drawElements</code> except they handle multiple lists of arguments in one call.</feature>

      <feature>The <code>gl_DrawID</code> builtin is added to the shading language. For any Multi* draw call variant, the index of the draw <code>i</code> may be read by the vertex shader as <code>gl_DrawID</code>.</feature>
      <glsl extname="GL_ANGLE_multi_draw">
        <stage type="vertex"/>
        <input name="gl_DrawID" type="int" />
      </glsl>

      <feature>On WebGL 2.0 contexts or WebGL 1.0 contexts that support ANGLE_instanced_arrays, all previously stated features are added. Furthermore, the <code>multiDrawArraysInstancedANGLE</code> and <code>multiDrawElementsInstancedANGLE</code> entry points are added. On WebGL 2.0 contexts, they behave as to multiple calls to <code>drawArraysInstanced</code> and <code>drawElementsInstanced</code> except they handle multiple lists of arguments in one call. On WebGL 1.0 contexts that support ANGLE_instanced_arrays, they behave as to multiple calls to <code>drawArraysInstancedANGLE</code> and <code>drawElementsInstancedANGLE</code> except they handle multiple lists of arguments in one call.</feature>
    </features>
  </overview>

  <idl xml:space="preserve">

interface mixin ANGLE_multi_draw_mixin {
  void multiDrawArraysANGLE(
      GLenum mode,
      (Int32Array or sequence&lt;GLint&gt;) firstsList, GLuint firstsOffset,
      (Int32Array or sequence&lt;GLsizei&gt;) countsList, GLuint countsOffset,
      GLsizei drawcount);
  void multiDrawElementsANGLE(
      GLenum mode,
      (Int32Array or sequence&lt;GLint&gt;) countsList, GLuint countsOffset,
      GLenum type,
      (Int32Array or sequence&lt;GLsizei&gt;) offsetsList, GLuint offsetsOffset,
      GLsizei drawcount);
};

interface mixin ANGLE_multi_draw_instanced_mixin {
  void multiDrawArraysInstancedANGLE(
      GLenum mode,
      (Int32Array or sequence&lt;GLint&gt;) firstsList, GLuint firstsOffset,
      (Int32Array or sequence&lt;GLsizei&gt;) countsList, GLuint countsOffset,
      (Int32Array or sequence&lt;GLsizei&gt;) instanceCountsList, GLuint instanceCountsOffset,
      GLsizei drawcount);
  void multiDrawElementsInstancedANGLE(
      GLenum mode,
      (Int32Array or sequence&lt;GLint&gt;) countsList, GLuint countsOffset,
      GLenum type,
      (Int32Array or sequence&lt;GLsizei&gt;) offsetsList, GLuint offsetsOffset,
      (Int32Array or sequence&lt;GLsizei&gt;) instanceCountsList, GLuint instanceCountsOffset,
      GLsizei drawcount);
};

[NoInterfaceObject]
ANGLE_multi_draw_1
{
};

[NoInterfaceObject]
ANGLE_multi_draw_2
{
};

ANGLE_multi_draw_1 includes ANGLE_multi_draw_mixin;
ANGLE_multi_draw_2 includes ANGLE_multi_draw_mixin;
ANGLE_multi_draw_2 includes ANGLE_multi_draw_instanced_mixin;

  </idl>

  <security>
    The multi-draw APIs are subject to all of the same rules regarding <a href="https://www.khronos.org/registry/webgl/specs/latest/1.0/#4.5">out-of-range array accesses</a> as the core WebGL APIs.
  </security>

  <samplecode xml:space="preserve">

    <pre>
var ext = gl.getExtension("ANGLE_multi_draw");
{
  // multiDrawArrays variant.
  let firsts = new Int32Array(...);
  let counts = new Int32Array(...);
  ext.multiDrawArraysANGLE(gl.TRIANGLES, firsts, 0, counts, 0, firsts.length);
}

{
  // multiDrawElements variant.
  // Assumes that the indices which have been previously uploaded to the
  // ELEMENT_ARRAY_BUFFER are to be treated as UNSIGNED_SHORT.
  let counts = new Int32Array(...);
  let offsets = new Int32Array(...);
  ext.multiDrawElementsANGLE(
      gl.TRIANGLES, counts, 0, gl.UNSIGNED_SHORT, offsets, 0, counts.length);
}

{
  // multiDrawArraysInstanced variant.
  let firsts = new Int32Array(...);
  let counts = new Int32Array(...);
  let instanceCounts = new Int32Array(...);
  ext.multiDrawArraysInstancedANGLE(
      gl.TRIANGLES, firsts, 0, counts, 0, instanceCounts, 0, firsts.length);
}

{
  // multiDrawElementsInstanced variant.
  // Assumes that the indices which have been previously uploaded to the
  // ELEMENT_ARRAY_BUFFER are to be treated as UNSIGNED_SHORT.
  let counts = new Int32Array(...);
  let offsets = new Int32Array(...);
  let instanceCounts = new Int32Array(...);
  ext.multiDrawElementsInstancedANGLE(
      gl.TRIANGLES, counts, 0, gl.UNSIGNED_SHORT, offsets, 0, instanceCounts, 0,
      counts.length);
}
    </pre>
  </samplecode>

  <tests/>

  <issues/>

  <history>
    <revision date="2018/09/25">
      <change>Initial version.</change>
    </revision>
    <revision date="2018/10/24">
      <change>Second version.</change>
    </revision>
  </history>
</proposal>
